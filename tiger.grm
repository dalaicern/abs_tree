%{
#include <stdio.h>
#include "util.h"
#include "table.h"
#include "symbol.h"
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
    int ival;
    string sval;
    A_var var;
    A_exp exp;
    A_dec dec;
    A_ty ty;
    A_decList declist;
    A_expList explist;
    A_field field;
    A_fieldList fieldlist;
    A_fundec fundec;
    A_fundecList funcdeclist;
    A_namety namety;
    A_nametyList nametylist;
    A_efield efield;
    A_efieldList efieldlist;
    struct {S_symbol ty; A_exp init;} var_id_suffix_type;
    struct {S_symbol result; A_exp body;} function_id_suffix_type;
}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%nonassoc OF
%nonassoc ID
%nonassoc WHILE DO FOR
%nonassoc LBRACK
%nonassoc ENDIF
%nonassoc ELSE
%nonassoc THEN


%left ASSIGN
%left AND OR
%left EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%type <exp> exp program
%type <var> lvalue
%type <explist> exp_list exp_seq
%type <ty> type
%type <fieldlist> type_fields
%type <field> type_field
%type <dec> decl type_decl var_decl function_decl
%type <declist> decl_list
%type <var_id_suffix_type> var_id_suffix
%type <function_id_suffix_type> function_id_suffix
%type <efieldlist> field_list

%start program

%%

program:   exp    {absyn_root=$1;}

exp: STRING                                           {$$=A_StringExp(EM_tokPos, $1);}
      | INT                                           {$$=A_IntExp(EM_tokPos, $1);}
      | NIL                                           {$$ = A_NilExp(EM_tokPos);}
      | MINUS exp %prec UMINUS                        {$$ = A_OpExp(EM_tokPos, A_minusOp, A_IntExp(EM_tokPos, 0), $2);}
      | lvalue                                        {$$ = A_VarExp(EM_tokPos, $1);}
      | lvalue ASSIGN exp                             {$$ = A_AssignExp(EM_tokPos, $1, $3);}
      | exp PLUS  exp                                 {$$ = A_OpExp(EM_tokPos, A_plusOp, $1, $3);}
      | exp MINUS exp                                 {$$ = A_OpExp(EM_tokPos, A_minusOp, $1, $3);}
      | exp TIMES exp                                 {$$ = A_OpExp(EM_tokPos, A_timesOp, $1, $3);}
      | exp DIVIDE exp                                {$$ = A_OpExp(EM_tokPos, A_divideOp, $1, $3);}
      | exp EQ  exp                                   {$$ = A_OpExp(EM_tokPos, A_eqOp, $1, $3);}
      | exp NEQ exp                                   {$$ = A_OpExp(EM_tokPos, A_neqOp, $1, $3);}
      | exp LT  exp                                   {$$ = A_OpExp(EM_tokPos, A_ltOp, $1, $3);}
      | exp LE  exp                                   {$$ = A_OpExp(EM_tokPos, A_leOp, $1, $3);}
      | exp GT  exp                                   {$$ = A_OpExp(EM_tokPos, A_gtOp, $1, $3);}
      | exp GE  exp                                   {$$ = A_OpExp(EM_tokPos, A_geOp, $1, $3);}
      | exp AND exp                                   {$$ = A_IfExp(EM_tokPos, $1, $3, A_IntExp(EM_tokPos, 0));}
      | exp OR exp                                    {$$ = A_IfExp(EM_tokPos, $1, A_IntExp(EM_tokPos, 1), $3);}
      | ID LPAREN exp_list RPAREN                     {$$ = A_CallExp(EM_tokPos, S_Symbol($1), $3);}
      | LPAREN exp_seq RPAREN                         {$$ = A_SeqExp(EM_tokPos, $2);}
      | ID LBRACE field_list RBRACE                   {$$ = A_RecordExp(EM_tokPos, S_Symbol($1), $3);}
      | ID LBRACK exp RBRACK OF exp                   {$$ = A_ArrayExp(EM_tokPos, S_Symbol($1), $3, $6);}
      | IF exp THEN exp %prec ENDIF                   {$$ = A_IfExp(EM_tokPos, $2, $4, NULL);}
      | IF exp THEN exp ELSE exp                      {$$ = A_IfExp(EM_tokPos, $2, $4, $6);}
      | WHILE exp DO exp                              {$$ = A_WhileExp(EM_tokPos, $2, $4);}
      | FOR ID ASSIGN exp TO exp DO exp               {$$ = A_ForExp(EM_tokPos, S_Symbol($2), $4, $6, $8);}
      | BREAK                                         {$$ = A_BreakExp(EM_tokPos);}
      | LET decl_list IN exp_seq END                  {$$ = A_LetExp(EM_tokPos, $2, A_SeqExp(EM_tokPos, $4));}

exp_list:                                             {$$ = NULL;}
       | exp                                          {$$ = A_ExpList($1, NULL);}
       | exp_list COMMA exp                           {$$ = A_ExpList($3, $1);}

exp_seq: exp                                          {$$ = A_ExpList($1, NULL);}
       | exp SEMICOLON exp_seq                        {$$ = A_ExpList($1, $3);}

field_list: ID EQ exp                                 {$$ = A_EfieldList(A_Efield(S_Symbol($1), $3), NULL);}
      | field_list COMMA ID EQ exp                    {$$ = A_EfieldList(A_Efield(S_Symbol($3), $5), $1);}

lvalue: ID                                            {$$ = A_SimpleVar(EM_tokPos, S_Symbol($1));}
      | lvalue DOT ID                                 {$$ = A_FieldVar(EM_tokPos, $1, S_Symbol($3));}
      | lvalue LBRACK exp RBRACK                      {$$ = A_SubscriptVar(EM_tokPos, $1, $3);}
      | ID LBRACK exp RBRACK                          {$$ = A_SubscriptVar(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)), $3);}

decl: type_decl                                       {$$ = $1;}
      | var_decl                                      {$$ = $1;}
      | function_decl                                 {$$ = $1;}
      
decl_list: decl                                       {$$ = A_DecList($1, NULL);}
          | decl_list decl                            {$$ = A_DecList($2, $1);}

type_decl: TYPE ID EQ type                            {$$ = A_TypeDec(EM_tokPos, 
                                                              A_NametyList(A_Namety(S_Symbol($2), $4), NULL));}

type: ID                                              {$$ = A_NameTy(EM_tokPos, S_Symbol($1));}
      | LBRACE type_fields RBRACE                     {$$ = A_RecordTy(EM_tokPos, $2);}
      | ARRAY OF ID                                   {$$ = A_ArrayTy(EM_tokPos, S_Symbol($3));}

type_fields:                                          {$$ = NULL;}
      | type_field                                    {$$ = A_FieldList($1, NULL);}
      | type_fields COMMA type_field                  {$$ = A_FieldList($3, $1);}

type_field: ID COLON ID                               {$$ = A_Field(EM_tokPos, S_Symbol($1), S_Symbol($3));}

var_decl: VAR ID var_id_suffix                        {
                                                        if ($3.ty) {
                                                          $$ = A_VarDec(EM_tokPos, S_Symbol($2), $3.ty, $3.init);
                                                        } else {
                                                          $$ = A_VarDec(EM_tokPos, S_Symbol($2), NULL, $3.init);
                                                        }
                                                      }
        
var_id_suffix: ASSIGN exp                             {$$.ty = NULL; $$.init = $2;}
        | COLON ID ASSIGN exp                         {$$.ty = S_Symbol($2); $$.init = $4;}

function_decl: FUNCTION ID LPAREN type_fields RPAREN function_id_suffix {
                                                        $$ = A_FunctionDec(EM_tokPos, 
                                                              A_FundecList(
                                                                A_Fundec(EM_tokPos, S_Symbol($2), $4, 
                                                                        $6.result, $6.body), 
                                                                NULL));
                                                      }

function_id_suffix: EQ exp                            {$$.result = NULL; $$.body = $2;}
            | COLON ID EQ exp                         {$$.result = S_Symbol($2); $$.body = $4;}

